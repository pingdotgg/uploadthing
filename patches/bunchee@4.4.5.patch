diff --git a/dist/bin/cli.js b/dist/bin/cli.js
index 07deb2df89c071d34e7bd8cd18a45cc5a143da89..e7af4c16bb146c7252899ed99b18a4e4c5a85e69 100755
--- a/dist/bin/cli.js
+++ b/dist/bin/cli.js
@@ -820,6 +820,7 @@ function parseCliArgs(argv) {
         '--no-external': Boolean,
         '--no-clean': Boolean,
         '--prepare': Boolean,
+        '--tsconfig': String,
         '-h': '--help',
         '-v': '--version',
         '-w': '--watch',
@@ -847,13 +848,14 @@ function parseCliArgs(argv) {
         external: !!args['--no-external'] ? null : args['--external'],
         clean: !args['--no-clean'],
         env: args['--env'],
-        prepare: !!args['--prepare']
+        prepare: !!args['--prepare'],
+        tsconfigPath: args['--tsconfig']
     };
     return parsedArgs;
 }
 async function run(args) {
     var _args_external;
-    const { source, format, watch, minify, sourcemap, target, runtime, dts, env, clean } = args;
+    const { source, format, watch, minify, sourcemap, target, runtime, dts, env, clean, tsconfigPath } = args;
     const cwd = args.cwd || process.cwd();
     const file = args.file ? path__default.default.resolve(cwd, args.file) : undefined;
     const bundleConfig = {
@@ -868,7 +870,8 @@ async function run(args) {
         minify: !!minify,
         sourcemap: sourcemap === false ? false : true,
         env: (env == null ? void 0 : env.split(',')) || [],
-        clean
+        clean,
+        tsconfigPath,
     };
     if (args.version) {
         return logger.log(version);
diff --git a/dist/index.js b/dist/index.js
index b068361b6c5b69d5bfff9c80d78b8e62b24ef5f3..7aca7926bc632d53d520863d52361492a5bea019 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -277,10 +277,10 @@ function resolveTypescriptHandler(cwd) {
     return ts;
 }
 const resolveTypescript = memoize(resolveTypescriptHandler);
-function resolveTsConfigHandler(cwd) {
+function resolveTsConfigHandler(cwd, filePath) {
     let tsCompilerOptions = {};
     let tsConfigPath;
-    tsConfigPath = path.resolve(cwd, 'tsconfig.json');
+    tsConfigPath = path.resolve(cwd, filePath ?? 'tsconfig.json');
     if (fileExists(tsConfigPath)) {
         const ts = resolveTypescript(cwd);
         const basePath = tsConfigPath ? path.dirname(tsConfigPath) : cwd;
@@ -1581,7 +1581,7 @@ async function bundle(cliEntryPath, { cwd: _cwd, ...options } = {}) {
     ;
     const hasBin = Boolean(pkg.bin);
     const isFromCli = Boolean(cliEntryPath);
-    let tsConfig = resolveTsConfig(cwd);
+    let tsConfig = resolveTsConfig(cwd, options.tsconfigPath);
     let hasTsConfig = Boolean(tsConfig == null ? void 0 : tsConfig.tsConfigPath);
     const defaultTsOptions = {
         tsConfigPath: tsConfig == null ? void 0 : tsConfig.tsConfigPath,
