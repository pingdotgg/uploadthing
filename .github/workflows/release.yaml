name: Release
on:
  push:
    branches:
      - main

env:
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Use PNPM
        uses: pnpm/action-setup@v2.2.4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "pnpm_cache_dir=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install deps (with cache)
        run: pnpm install

      - name: Check packages for common errors
        run: pnpm turbo --filter "./packages/*" build lint test typecheck

      # Using custom token `MY_GITHUB_TOKEN` with more access to avoid rate limiting
      - name: Create Release
        id: changeset
        uses: changesets/action@v1.4.1
        with:
          commit: "chore(release): ðŸ“¦ version packages"
          title: "chore(release): ðŸ“¦  version packages"
          publish: npx changeset publish
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Changeset has some issues with pnpm so we sync it up manually
      - name: Sync lockfile if necessary
        if: steps.changeset.outputs.hasChangesets == 'true'
        run: |
          git checkout changeset-release/main
          pnpm install --no-frozen-lockfile
          git add .
          git commit -m "chore(release): ðŸ“¦ sync lockfile"
          git push origin changeset-release/main

      - name: Send a discord notification
        if: steps.changeset.outputs.published == 'true'
        uses: actions/github-script@v6
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        with:
          github-token: ${{ secrets.MY_GITHUB_TOKEN }}
          script: |
            fetch(process.env.DISCORD_WEBHOOK_URL, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                content: `New release available. [Read the changelog](https://github.com/pingdotgg/uploadthing/releases/latest)`
              }),
            })
            .then((res) => {
              console.log('Sent discord notification', res)
            })
            .catch((err) => {
              console.error('Error sending discord notification', err)
            })
